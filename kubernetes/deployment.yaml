# Example Kubernetes deployment with persistent storage.
#
# 1 replica and 10Gi of storage can handle pretty heavy usage by at least one
# user, i.e. the main dev of numblr ðŸ‘».  (Although that usage is on a regular
# VM so far, maybe they will try out running it in production on Kubernetes
# sometime soon, given the existence of this file. âœ¨)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: numblr
  namespace: default
  labels:
    app: numblr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: numblr
  template:
    metadata:
      labels:
        app: numblr
    spec:
      containers:
      - name: numblr
        image: ghcr.io/heylu/numblr:main
        imagePullPolicy: Always # image tag is `main`, so pull always to get the latest one
        args:
          - /app/numblr
          - -addr=0.0.0.0:5555
          - -debug-addr=0.0.0.0:6060
          - -db=/app/data/cache.db
          - -stats
        readinessProbe:
          httpGet:
            path: /about
            port: http
        volumeMounts:
        - name: data
          mountPath: /app/data
        ports:
        - name: http
          containerPort: 5555
        - name: debug
          containerPort: 6060
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: numblr-volume
---
# Persistent storage for faster access and history.
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: numblr-volume
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-path
  resources:
    requests:
      storage: 10Gi
---
# Expose on port 15555 to the host.
#
# With this setup the port is then routed outside the host in some other way,
# e.g. using Caddy outside of Kubernetes.
apiVersion: v1
kind: Service
metadata:
  name: numblr
  namespace: default
spec:
  selector:
    app: numblr
  ports:
    - protocol: TCP
      port: 15555
      targetPort: http
  type: LoadBalancer
